--Importing and Exploring the Dataset--
SELECT * 
From CopyofIMDBTop250MoviesCleanedversionIMDBTop250Movies;
alter TABLE CopyofIMDBTop250MoviesCleanedversionIMDBTop250Movies 
	rename to Movies;
SELECT * 
FROM Movies;


--Idenitifying Top 5 Budgeted Films--
SELECT name, budget
from Movies
order by budget desc limit 5;

  - Adjusting for non-USD currencies- 
    -Princess Mononoke-
UPDATE Movies
SET budget = REPLACE(budget, 2400000000, 23500000)

    -3 Idiots-
UPDATE Movies 
SET budget = REPLACE(budget, 550000000, 6700000)

--Retreiving Corrected Top 5 Budgeted Films--
SELECT name, budget
FROM Movies
ORDER BY budget DESC
LIMIT 5
                ---File Exported As: Top_5_Budgeted.csv for reference---

--Top 5 Rated Movies--
SELECT name, rating
FROM Movies
ORDER BY rating DESC
LIMIT 5
                ---File Exported As: Top_5_HighestRated.csv for reference---

--Top 5 Box Office Hits--
SELECT name, box_office
 FROM Movies
 GROUP BY name 
 ORDER BY box_office DESC
 LIMIT 5
                ---File Exported As: Top_5_BoxOffice.csv for reference---

--Top 10 Most Profitable Movies--
 SELECT name, budget, box_office, (box_office - budget) AS profit 
 FROM Movies
 ORDER BY profit DESC
 LIMIT 10
                 ---File Exported As: Top_10_MostProfitable.csv for reference---

--Identifying Popular Genres--
SELECT genre, COUNT(*) AS genre_count
FROM (
  SELECT TRIM(value) AS genre
  FROM Movies
  CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
)
GROUP BY genre
ORDER BY genre_count DESC
LIMIT 5
                  ---File Exported As: Top_5_PopularGenres.csv for reference---

--Finding Directors with the Most Movies--
SELECT directors, COUNT(*) AS Number_of_movies
 FROM Movies
 GROUP BY directors
 ORDER BY COUNT(*) DESC
 Limit 10
                  ---File Exported As: Top_10_Directors.csv for reference---

--Number of Movies with Each Rating--
SELECT rating, COUNT(*) AS rating_count
 FROM Movies
 GROUP BY rating
 ORDER BY COUNT(*) DESC
                   ---File Exported As: Rating_Count.csv for reference---

--Top 10 Best years--
SELECT year, AVG(rating) AS avg_rating
FROM Movies
GROUP BY year
ORDER BY avg_rating DESC
LIMIT 10;
                   ---File Exported As: Top_10_BestYears.csv for reference---

--How Many Movies per Decade--
SELECT
  CAST((year / 10 * 10) AS TEXT) || 's' AS decade,
  COUNT(*) AS movie_count
FROM Movies
GROUP BY decade
ORDER BY decade;
                   ---File Exported As: Movies_By_Decade.csv for reference---

--Most Popular Movie Genre in Each Decade--
  -Needed to split Genre column into split_1, split_2, & split_3 in original .csv file to achieve this-

        -Common Table Expression (CTE) to transform and combine the data from the original table-
WITH AllGenres AS (
  SELECT
              -Extract the decade from the year and format it-
    SUBSTR(year, 1, 3) || '0s' AS decade,
              -Combine genre columns into a single column-
    Split_1 AS genre
  FROM SplitGenreIMDBTop250Movies
  UNION ALL
  SELECT
    SUBSTR(year, 1, 3) || '0s' AS decade,
    Split_2 AS genre
  FROM SplitGenreIMDBTop250Movies
  UNION ALL
  SELECT
    SUBSTR(year, 1, 3) || '0s' AS decade,
    Split_3 AS genre
  FROM SplitGenreIMDBTop250Movies
)
      -Main query-
SELECT
  decade,
  genre,
  genre_count
FROM (
      -Subquery to count genres within decades and rank them-
  SELECT
    decade,
    genre,
    COUNT(*) AS genre_count,
    ROW_NUMBER() OVER (PARTITION BY decade ORDER BY COUNT(*) DESC) AS row_num
  FROM AllGenres
  WHERE genre IS NOT NULL AND genre <> ''
  GROUP BY decade, genre
) AS ranked_genres
WHERE row_num = 1;
                   ---File Exported As: PopularGenre_Decades.csv for reference---
       

